-- Clean up test data (delete child records first, then parent records)
DELETE FROM [TransactionItems];
DELETE FROM [Transactions];
GO

-- Test 1: Valid transaction creation with all fields
PRINT 'Test 1: Valid transaction creation with all fields';
DECLARE @new_transaction_id UNIQUEIDENTIFIER = NEWID();
DECLARE @inserted_count INT;

EXEC LogTransaction
    @user_id = 1,
    @transaction_type = 1,
    @resident_id = 1,
    @new_transaction_id = @new_transaction_id;

-- Assert: Transaction should be inserted into the table with provided ID
SELECT @inserted_count = COUNT(*)
FROM Transactions
WHERE id = @new_transaction_id
  AND user_id = 1
  AND transaction_type = 1
  AND resident_id = 1;

IF @inserted_count <> 1
    THROW 50101, 'Test 1 FAILED: Transaction was not inserted correctly', 1;

PRINT 'Test 1 PASSED: Transaction created successfully with all fields';
GO

-- Test 2: Valid transaction with NULL resident_id (nullable field)
PRINT 'Test 2: Valid transaction with NULL resident_id';
DECLARE @new_transaction_id UNIQUEIDENTIFIER = NEWID();
DECLARE @inserted_count INT;

EXEC LogTransaction
    @user_id = 2,
    @transaction_type = 2,
    @resident_id = NULL,
    @new_transaction_id = @new_transaction_id;

-- Assert: Transaction should be inserted with NULL resident_id
SELECT @inserted_count = COUNT(*)
FROM Transactions
WHERE id = @new_transaction_id
  AND user_id = 2
  AND transaction_type = 2
  AND resident_id IS NULL;

IF @inserted_count <> 1
    THROW 50102, 'Test 2 FAILED: Transaction with NULL resident_id was not inserted correctly', 1;

PRINT 'Test 2 PASSED: Transaction created successfully with NULL resident_id';
GO

-- Test 3: Multiple transactions with caller-provided unique IDs
PRINT 'Test 3: Multiple transactions with caller-provided unique IDs';
DECLARE @transaction_id_1 UNIQUEIDENTIFIER = NEWID();
DECLARE @transaction_id_2 UNIQUEIDENTIFIER = NEWID();
DECLARE @transaction_id_3 UNIQUEIDENTIFIER = NEWID();

EXEC LogTransaction @user_id = 3, @transaction_type = 1, @resident_id = 1, @new_transaction_id = @transaction_id_1;
EXEC LogTransaction @user_id = 3, @transaction_type = 1, @resident_id = 1, @new_transaction_id = @transaction_id_2;
EXEC LogTransaction @user_id = 3, @transaction_type = 1, @resident_id = 1, @new_transaction_id = @transaction_id_3;

-- Assert: All IDs should be unique (generated by caller)
IF @transaction_id_1 = @transaction_id_2 OR @transaction_id_1 = @transaction_id_3 OR @transaction_id_2 = @transaction_id_3
    THROW 50103, 'Test 3 FAILED: Transaction IDs are not unique', 1;

-- Assert: All three transactions should exist in the table
DECLARE @count INT;
SELECT @count = COUNT(*) FROM Transactions WHERE id IN (@transaction_id_1, @transaction_id_2, @transaction_id_3);

IF @count <> 3
    THROW 50103, 'Test 3 FAILED: Not all transactions were inserted', 1;

PRINT 'Test 3 PASSED: Multiple transactions created with unique IDs';
GO

-- Test 4: Verify transaction_date is auto-populated
PRINT 'Test 4: Verify transaction_date is auto-populated';
DECLARE @new_transaction_id UNIQUEIDENTIFIER = NEWID();
DECLARE @transaction_date DATETIME;

EXEC LogTransaction
    @user_id = 4,
    @transaction_type = 3,
    @resident_id = 2,
    @new_transaction_id = @new_transaction_id;

-- Assert: Transaction date should be populated and recent (within last minute)
SELECT @transaction_date = transaction_date
FROM Transactions
WHERE id = @new_transaction_id;

IF @transaction_date IS NULL
    THROW 50104, 'Test 4 FAILED: Transaction date was not auto-populated', 1;

IF DATEDIFF(SECOND, @transaction_date, GETDATE()) > 60
    THROW 50104, 'Test 4 FAILED: Transaction date is not recent', 1;

PRINT 'Test 4 PASSED: Transaction date is auto-populated correctly';
GO

-- Test 5: Duplicate transaction details should be allowed (separate events)
PRINT 'Test 5: Duplicate transaction details should be allowed';
DECLARE @transaction_id_1 UNIQUEIDENTIFIER = NEWID();
DECLARE @transaction_id_2 UNIQUEIDENTIFIER = NEWID();
DECLARE @count_same_details INT;

-- Insert first transaction
EXEC LogTransaction
    @user_id = 5,
    @transaction_type = 1,
    @resident_id = 3,
    @new_transaction_id = @transaction_id_1;

-- Insert duplicate transaction with same details but different ID
EXEC LogTransaction
    @user_id = 5,
    @transaction_type = 1,
    @resident_id = 3,
    @new_transaction_id = @transaction_id_2;

-- Assert: Both transactions should have unique IDs
IF @transaction_id_1 = @transaction_id_2
    THROW 50105, 'Test 5 FAILED: Duplicate transactions should have unique IDs', 1;

-- Assert: Both transactions should exist in the database
SELECT @count_same_details = COUNT(*)
FROM Transactions
WHERE user_id = 5
  AND transaction_type = 1
  AND resident_id = 3;

IF @count_same_details <> 2
    THROW 50105, 'Test 5 FAILED: Both duplicate transactions should be logged', 1;

-- Assert: Both specific IDs should exist
DECLARE @both_exist INT;
SELECT @both_exist = COUNT(DISTINCT id)
FROM Transactions
WHERE id IN (@transaction_id_1, @transaction_id_2);

IF @both_exist <> 2
    THROW 50105, 'Test 5 FAILED: Both transaction IDs should exist in database', 1;

PRINT 'Test 5 PASSED: Duplicate transaction details are allowed (logged as separate events)';
GO

-- Test 6: Duplicate transaction_id should NOT be allowed (Primary Key constraint)
PRINT 'Test 6: Duplicate transaction_id should NOT be allowed';
DECLARE @duplicate_id UNIQUEIDENTIFIER = NEWID();
DECLARE @error_occurred BIT = 0;

-- Insert first transaction with specific ID using stored procedure
BEGIN TRY
    EXEC LogTransaction
        @user_id = 6,
        @transaction_type = 1,
        @resident_id = 1,
        @new_transaction_id = @duplicate_id;
END TRY
BEGIN CATCH
    DECLARE @FirstErrorMsg NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @FirstErrorNum INT = ERROR_NUMBER();
    DECLARE @FullErrorMsg NVARCHAR(4000) = 'Test 6 FAILED: First insert failed with Error ' + CAST(@FirstErrorNum AS NVARCHAR) + ': ' + @FirstErrorMsg;
    THROW 50106, @FullErrorMsg, 1;
END CATCH

-- Attempt to insert second transaction with same ID using stored procedure (should fail)
BEGIN TRY
    EXEC LogTransaction
        @user_id = 7,
        @transaction_type = 2,
        @resident_id = 2,
        @new_transaction_id = @duplicate_id;

    -- If we reach here, the duplicate was allowed (FAIL)
    THROW 50106, 'Test 6 FAILED: Duplicate transaction_id was allowed (Primary Key constraint not working)', 1;
END TRY
BEGIN CATCH
    -- Expected to catch an error (primary key violation)
    IF ERROR_NUMBER() = 2627 OR ERROR_NUMBER() = 2601 -- Primary key or unique constraint violation
        SET @error_occurred = 1;
    ELSE BEGIN
        DECLARE @SecondErrorMsg NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @SecondErrorNum INT = ERROR_NUMBER();
        DECLARE @SecondFullErrorMsg NVARCHAR(4000) = 'Test 6 FAILED: Unexpected error ' + CAST(@SecondErrorNum AS NVARCHAR) + ': ' + @SecondErrorMsg;
        THROW 50106, @SecondFullErrorMsg, 1;
    END
END CATCH

-- Assert: Error should have occurred
IF @error_occurred = 0
    THROW 50106, 'Test 6 FAILED: No error was raised for duplicate transaction_id', 1;

-- Assert: Only one transaction with this ID should exist
DECLARE @count_with_id INT;
SELECT @count_with_id = COUNT(*) FROM Transactions WHERE id = @duplicate_id;

IF @count_with_id <> 1
    THROW 50106, 'Test 6 FAILED: Should have exactly one transaction with this ID', 1;

PRINT 'Test 6 PASSED: Duplicate transaction_id correctly rejected (Primary Key constraint enforced)';
GO

PRINT '';
PRINT 'ALL TESTS PASSED for LogTransaction';
GO