name: Deploy to Production

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'

jobs:
  sync-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get package version
      id: package-version
      run: |
        # Extract version from package.json
        VERSION=$(node -p "require('./package.json').version")
        echo "PACKAGE_VERSION=v$VERSION" >> $GITHUB_OUTPUT

    - name: Check if tag exists
      id: check-tag
      run: |
        # Check if the tag already exists
        git fetch --tags # First fetch all tags from remote
        if git show-ref --tags | grep -q "refs/tags/${{ steps.package-version.outputs.PACKAGE_VERSION }}"; then
          echo "Tag already exists"
          echo "TAG_EXISTS=true" >> $GITHUB_OUTPUT
        else
          echo "Tag does not exist"
          echo "TAG_EXISTS=false" >> $GITHUB_OUTPUT
        fi

    - name: Create and push tag
      if: steps.check-tag.outputs.TAG_EXISTS == 'false'
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        
        # Create and push the new tag
        git tag ${{ steps.package-version.outputs.PACKAGE_VERSION }}
        git push origin ${{ steps.package-version.outputs.PACKAGE_VERSION }}

    - name: Create GitHub Release
      if: steps.check-tag.outputs.TAG_EXISTS == 'false'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.package-version.outputs.PACKAGE_VERSION }}
        generate_release_notes: true

  build_and_deploy_job:
    needs: sync-tag
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    environment: production
    steps:
      - name: Check out source
        uses: actions/checkout@v3
        with:
          submodules: true
          lfs: false

      - name: Extract Version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token:
            ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_SALMON_ISLAND_01BE9BF1E}}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: 'upload'
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: '/' # App source code path
          api_location: '' # Api source code path - optional
          output_location: 'dist' # Built app content directory - optional
          ###### End of Repository/Build Configurations ######

      - name: Post URL
        run: |
            echo "Deploying version ${{ steps.get_version.outputs.VERSION }}"
            echo "App deployed :rocket:" >> $GITHUB_STEP_SUMMARY
            echo ${{ steps.builddeploy.outputs.static_web_app_url }} >> $GITHUB_STEP_SUMMARY
