name: SQL Tests (Reusable)

on:
  push:
    branches:
      - '**'
      - '!main'
    paths:
      - 'database/**/*.sql'

jobs:
  test-stored-procedures:
    runs-on: ubuntu-latest

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: YourStrong@Passw0rd!
          MSSQL_PID: Developer
        ports:
          - 1433:1433
        options: >-
          --health-cmd "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P
          $SA_PASSWORD -C -Q 'SELECT 1' || exit 1" --health-interval 10s
          --health-timeout 10s --health-retries 10 --health-start-period 60s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SQL Server tools
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo tee /etc/apt/trusted.gpg.d/microsoft.asc
          sudo add-apt-repository "$(wget -qO- https://packages.microsoft.com/config/ubuntu/22.04/prod.list)"
          sudo apt-get update
          sudo apt-get install -y mssql-tools18 unixodbc-dev

      - name: Wait for SQL Server to be ready
        run: |
          echo "Waiting for SQL Server to be fully ready..."
          for i in {1..30}; do
            if /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd!' -C -Q "SELECT 1" &> /dev/null; then
              echo "SQL Server is ready!"
              break
            fi
            echo "Attempt $i: SQL Server not ready yet, waiting..."
            sleep 5
          done

          # Final verification
          /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd!' -C -Q "SELECT @@VERSION"

      - name: Create test database
        run: |
          /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd!' -C -Q "CREATE DATABASE Inventory;"
          echo "Test database 'Inventory' created successfully"

      - name: Deploy database tables
        run: |
          echo "Deploying database tables..."
          for file in ./database/tables/*.sql; do
            if [ -f "$file" ]; then
              echo "Executing: $file"
              /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd!' -d Inventory -i "$file"
            fi
          done

      - name: Deploy database dependencies
        run: |
          echo "Deploying database dependencies..."
          for file in ./database/dependencies/*.sql; do
            if [ -f "$file" ]; then
              echo "Executing: $file"
              /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd!' -d Inventory -i "$file"
            fi
          done

      - name: Deploy database types
        run: |
          echo "Deploying database types..."
          for file in ./database/types/*.sql; do
            if [ -f "$file" ]; then
              echo "Executing: $file"
              /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd!' -d Inventory -i "$file"
            fi
          done

      - name: Deploy database procedures
        run: |
          echo "Deploying database procedures..."
          for file in ./database/procedures/*.sql; do
            if [ -f "$file" ]; then
              echo "Executing: $file"
              /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd!' -d Inventory -i "$file"
            fi
          done

      - name: Deploy database data_seed
        run: |
          echo "Deploying database data_seed..."
          for file in ./database/data_seed/*.sql; do
            if [ -f "$file" ]; then
              echo "Executing: $file"
              /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd!' -d Inventory -i "$file"
            fi
          done

      - name: Deploy database data_test
        run: |
          echo "Deploying database data_test..."
          for file in ./database/data_test/*.sql; do
            if [ -f "$file" ]; then
              echo "Executing: $file"
              /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd!' -d Inventory -i "$file"
            fi
          done

      - name: Run tests
        run: |
          echo "Running stored procedure tests..."
          for file in ./tests/*.sql; do
            if [ -f "$file" ]; then
              echo "Running test: $file"
              /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd!' -d Inventory -i "$file" -b
              if [ $? -ne 0 ]; then
                echo "Test failed: $file"
                exit 1
              fi
              echo "Test passed: $file"
            fi
          done

      - name: Generate test report
        if: always()
        run: |
          echo "Generating test report..."
          /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd!' -C -Q "
          SELECT 
            'Test Results Summary' as Report,
            @@VERSION as SQLServerVersion,
            GETDATE() as TestRunTime
          " -o test-results.txt

          echo "==================================="
          echo "Test Report:"
          echo "==================================="
          cat test-results.txt

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-Inventory
          path: test-results.txt

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up..."
          /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd!' -C -Q "DROP DATABASE IF EXISTS Inventory;"
          echo "Cleanup complete"
